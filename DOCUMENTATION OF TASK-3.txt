DOCUMENTATION OF TASK-3
Import Statements:

The code imports the random, string, and secrets modules for generating random values and working with strings.
Function generate_password:

The function takes two parameters: length (desired password length) and complexity (a string indicating the complexity level).
Depending on the complexity level, the function selects the appropriate set of characters to use in the password generation.
The secrets.SystemRandom() generator is used for added security in generating random values.
The password is generated by randomly choosing characters from the selected set, and it is returned as a string.
Print Statements:

The code prints a header for the password generator and provides information about the available complexity levels.
Input Loop:

The code enters a loop to obtain the desired password length from the user.
It prompts the user to enter a numeric value and handles non-numeric input with an error message.
Input for Complexity Level:

The user is prompted to enter the desired complexity level using a numeric value (1, 2, 3, or 4).
Password Generation:

The generate_password function is called with the provided length and complexity level.
The generated password is stored in the password variable.
Display Generated Password:

The generated password is printed to the console.
In summary, this code implements a simple password generator that allows users to choose the length and complexity of the generated passwords. The generator uses different sets of characters (letters, digits, special characters, and whitespace) to create passwords of varying complexity. The secrets.SystemRandom() generator is used for a more secure generation of random values compared to the standard random module.